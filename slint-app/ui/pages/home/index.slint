import { VerticalBox, HorizontalBox } from "std-widgets.slint";

export enum Weather {
    Cloudy,
    Sunny,
}

export global WeatherLogic {
    pure public function icon(w: Weather) -> image {
        if (w == Weather.Cloudy) {
            return @image-url("icons/cloudy.svg");
        }
        if (w == Weather.Sunny) {
            return @image-url("icons/sunny.svg");
        }
        return @image-url("icons/fog.svg");
    }
}

export enum Location {
    Shanghai,
}

export struct HomeTimeData {
    year: int,
    month: int,
    day: int,
    hour: int,
    minute: int,
    second: int,
    week: int,
}

export struct HomeWeatherData {
    weather: Weather,
    location: Location,
    max-temp: int,
    min-temp: int,
    current-temp: int,
    current-humi: int,
}

export component TimeWeatherHomePage inherits Rectangle {
    width: 240px;
    height: 240px;
    background: black;

    in property <HomeTimeData> time: {
        year: 2019,
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        week: 1,
    };

    in property <HomeWeatherData> weather;

    // 将一个整数n转化为2位的字符串，不足2位的前面补0
    function cvt-n-to-two(n: int) -> string {
        if (n < 10) {
            return "0" + n;
        } 
        return n;
    }

    property <[string]> const-week-string: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];
    // 将一个整数n转化为星期
    function cvt-n-to-week(n: int) -> string {
        if (n >= 0 && n < 7) {
            return const-week-string[n];
        }
        return "error";
    }

    function build-time-string() -> string {
        return "\{cvt-n-to-two(time.hour)}:\{cvt-n-to-two(time.minute)}:\{cvt-n-to-two(time.second)}";
    }

    function build-date-week-string() -> string {
        return "\{time.year}年\{cvt-n-to-two(time.month)}月\{cvt-n-to-two(time.day)}日  \{cvt-n-to-week(time.week)}";
    }

    function build-weather-name(n: Weather) -> string {
        return "多云";
    }

    function build-localtion-name(n: Location) -> string {
        if (n == Location.Shanghai) {
            return "上海";
        }
        return "未知";
    }
    
    VerticalLayout {
        padding: 2px;
        Rectangle {
            height: 80px;
            border-color: gray;
            border-width: 1px;
            border-radius: 10px;
            HorizontalLayout {
                padding: 5px;
                Rectangle {
                    VerticalLayout {
                        alignment: center;
                        Text {
                            text: "今日天气";
                            font-size: 15px;
                            color: white;
                        }
                        HorizontalLayout { 
                            alignment: center;
                            Text {
                                text: build-localtion-name(weather.location);
                                font-size: 15px;
                                color: white;
                            }
                        }
                    }
                }
                Rectangle {
                    width: 1px;
                    background: gray;
                }
                Rectangle {
                    VerticalLayout {
                        alignment: center;
                        Text {
                            text: "最高温度: \{weather.max-temp}℃";
                            font-size: 15px;
                            color: white;
                        }
                        Text {
                            text: "最低温度: \{weather.min-temp}℃";
                            font-size: 15px;
                            color: white;
                        }
                    }
                }
                Rectangle {
                    border-color: gray;
                    border-width: 1px;
                    VerticalLayout {
                        alignment: center;
                        
                        Image {
                            source: WeatherLogic.icon(weather.weather);
                            width: 45px;
                            height: 45px;
                            colorize: white;
                        }
                        HorizontalLayout {
                            alignment: center;
                            Text {
                                text: build-weather-name(weather.weather);
                                font-size: 16px;
                                color: white;
                            }
                        }
                    }
                }
            }
        }
        Rectangle {
            height: 8px;
        }
        Rectangle {
            border-width: 1px;
            border-radius: 10px;
            VerticalLayout {
                height: 80px;
                alignment: center;
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: build-time-string();
                        font-size: 24px;
                        color: white;
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: build-date-week-string();
                        font-size: 20px;
                        color: white;
                    }
                }
            }
        }
        Rectangle {
            height: 10px;
        }
        Rectangle {
            height: 80px;
            VerticalLayout {
                alignment: center;
                padding-bottom: 10px;
                HorizontalLayout {
                    Image {
                        source: @image-url("icons/thermometer.svg");
                        colorize: red;
                    }
                    HorizontalBox {
                        Rectangle {
                            border-width: 1px;
                            border-color: white;
                            border-radius:5px;
                            HorizontalLayout {
                                padding: 2px;
                                Rectangle {
                                    background: red;
                                    width: 50%;
                                }
                            }
                        }
                    }
                    Text {
                        text: "\{weather.current-temp}";
                        font-size: 20px;
                        color: red;
                    }
                    Text {
                        text: "℃";
                        font-size: 20px;
                        color: white;
                    }
                }
                HorizontalLayout {
                    Image {
                        source: @image-url("icons/water-level.svg");
                        colorize: skyblue;
                    }
                    HorizontalBox {
                        Rectangle {
                            border-width: 1px;
                            border-color: white;
                            border-radius:5px;
                            HorizontalLayout {
                                padding: 2px;
                                Rectangle {
                                    background: green;
                                    width: 75%;
                                }
                            }
                        }
                    }
                    Text {
                        text: "\{weather.current-humi}";
                        font-size: 20px;
                        color: green;
                    }
                    Text {
                        text: "%";
                        font-size: 20px;
                        color: white;
                    }
                }
            }
        }
    }
}

export component HomePage inherits Rectangle {
    in property <HomeTimeData> time: {
        year: 2019,
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        week: 1,
    };

    in property <HomeWeatherData> weather;

    callback open-menu();

    TimeWeatherHomePage {
        time: time;
        weather: weather;
    }

    // 单击进入菜单
    public function on-one-button-click() {
        open-menu();
    }

    public function on-one-button-long-pressed-holding(dur: duration) {
        debug("todo switch home page");
    }

    public function on-one-button-long-pressed-held(dur: duration) {
        debug("todo switch home page");
    }
}