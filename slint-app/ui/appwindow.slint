import { MultiPage } from "pages/index.slint";
import { BootState } from "pages/boot/index.slint";
import { HomeWeatherData, HomeTimeData } from "pages/home/index.slint";
import "fonts/microsoft-yahei.ttf";
import { FPSTestType } from "pages/fpstest/index.slint";
import { Page } from "pages/common/page.slint";
import { MusicItemInfo } from "pages/music/index.slint"; 

export component AppWindow inherits Window {
    default-font-family: "Microsoft YaHei";
    width: 240px;
    height: 240px;

    in-out property <float> mock-brightness: 1;
    Rectangle {
        z: 2;
        width: parent.width;
        height: parent.width;
        background: black.with-alpha(1-mock-brightness);
    }

    in property <int> fps;
    in property <int> memory;
    in property <int> largest-free-block;
    in property <int> cpu;
    VerticalLayout {
        z: 1;
        alignment: start;
        HorizontalLayout {
            HorizontalLayout {
                alignment: start;
                Rectangle {
                    background: gray.with-alpha(0.5);
                    Text {
                        color: #ff2a00;
                        font-size: 20px;
                        text: "memory: \{memory}\n"+"free block: \{largest-free-block}";
                    }
                }
            }
            HorizontalLayout {
                alignment: end;
                Rectangle {
                    background: gray.with-alpha(0.5);
                    Text {
                        color: #ff2a00;
                        font-size: 20px;
                        text: "fps: \{fps}\n"+"cpu: \{cpu}";
                    }
                }
            }
        }
    }

    in property <bool> show-external-display;
    in property <image> external-display-image;

    touch-area := TouchArea {
        pointer-event(it) => { touch-area-pointer-event(it); }
        VerticalLayout {
            alignment: center;
            Rectangle {
                Image {
                    visible: show-external-display;
                    source: external-display-image;
                }
                m := MultiPage{
                    z: 0;
                    home-page-time: home-page-time;
                    home-page-weather: home-page-weather;
                    
                    photo-page-enter => { photo-page-enter(); }
                    photo-page-request-next => { photo-page-request-next(); }
                    photo-page-request-auto-play => { photo-page-request-auto-play(); }
                    photo-page-request-stop-auto-play => { photo-page-request-stop-auto-play(); }
                    photo-page-exit => { photo-page-exit(); }
            
                    clock-page-enter => { clock-page-enter(); }
                    clock-page-exit => { clock-page-exit(); }
            
                    fpstest-page-enter => { fpstest-page-enter(); }
                    fpstest-page-exit => { fpstest-page-exit(); }
                    fpstest-page-update-type(t) => { fpstest-page-update-type(t); }
            
                    projector-page-local-ip: projector-page-ip;
                    projector-page-local-port: projector-page-port;
                    projector-page-enter => { projector-page-enter(); }
                    projector-page-exit => { projector-page-exit(); }
            
                    music-page-note: music-page-note;
                    music-page-percent: music-page-percent;
                    music-page-play(i) => { return music-page-play(i); }
                    music-page-enter => { music-page-enter(); }
                    music-page-exit => { music-page-exit(); }
            
                    network-monitor-page-plot: network-monitor-page-plot;
                }
            }
        }
    }
    
    // 原始触摸事件
    function touch-area-is-pressed() -> bool { return touch-area.pressed; }
    callback touch-area-pointer-event(PointerEvent);

    // 设置启动状态
    public function set-boot-state(state: BootState) { m.boot-page-set-state(state); }

    // home页的时间和天气
    in property <HomeTimeData> home-page-time;
    in property <HomeWeatherData> home-page-weather;

    // photo页相关
    callback photo-page-enter();
    callback photo-page-request-next();
    callback photo-page-request-auto-play();
    callback photo-page-request-stop-auto-play();
    callback photo-page-exit();

    // clock页相关
    callback clock-page-enter();
    callback clock-page-exit();

    // fps测试页相关
    callback fpstest-page-enter();
    callback fpstest-page-exit();
    callback fpstest-page-update-type(FPSTestType);

    // projector页相关
    in property <string> projector-page-ip;
    in property <int> projector-page-port;
    callback projector-page-enter();
    callback projector-page-exit();

    // music页相关
    in property <string> music-page-note;
    in property <float> music-page-percent;
    callback music-page-play(MusicItemInfo) -> bool;
    callback music-page-enter();
    callback music-page-exit();
    public function music-page-on-play-done(info: MusicItemInfo) -> bool { return m.music-page-on-play-done(info); }

    // network
    in property <image> network-monitor-page-plot;

    // 触发点击事件
    // count: 点击次数
    public function on-one-button-clicks(count: int) {
        debug("click count: ", count);
        if (count == 1) {
            m.on-one-button-click();
        } 
        if (count == 2) {
            m.on-one-button-double-click();
        }
        if (count == 3) {
            m.on-one-button-triple-click();
        }
    }

    // 触发长按事件
    // dur: 按下时长
    public function on-one-button-long-pressed-holding(dur: duration) {
        m.on-one-button-long-pressed-holding(dur);
    }

    // 长按后松开
    // dur: 按下总时长
    public function on-one-button-long-pressed-held(dur: duration) {
        m.on-one-button-long-pressed-held(dur);
    }
}