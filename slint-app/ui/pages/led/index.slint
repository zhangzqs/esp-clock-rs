import { Button } from "std-widgets.slint";

export component LEDPage inherits Rectangle {
    width: 240px;
    height: 240px;
    background: @linear-gradient(90deg, #3f87a6 0%, #ebf8e1 50%, #f69d3c 100%);

    callback brightness-changed(float);
    callback exit();

    property <float> brightness: 0%;
    property <length> radius: 100px;
    property <length> slot-width: 20px;
    property <length> circle-radius: 20px;
    property <angle> rotation: 180deg-brightness*180deg;
    property <duration> last-duration: 0s;
    property <bool> is-add-mode: true;

    r := Rectangle {
        width: radius*2;
        height: radius*2;
        border-radius: radius;
        border-color: white.with-alpha(0.5);
        border-width: slot-width;
    }

    Rectangle {
        width: circle-radius*2;
        height: circle-radius*2;
        // border-radius: circle-radius; // slint 的软件渲染器有bug，这种情况下的background只能是纯色
        background: @linear-gradient(brightness*360deg, #f69d3c 0%, #ebf8e1 50%, #3f87a6 100%).darker(1).brighter(brightness);
        x: root.width/2 - circle-radius + Math.cos(rotation) * (radius - slot-width/2);
        y: root.height/2 - circle-radius+ Math.sin(rotation) * (radius - slot-width/2);
    }


    Rectangle {
        width: circle-radius*2;
        height: circle-radius*2;
        // border-radius: circle-radius; // slint 的软件渲染器有bug，这种情况下的background只能是纯色
        background: @linear-gradient((1-brightness)*360deg, #f69d3c 0%, #ebf8e1 50%, #3f87a6 100%).darker(1).brighter(brightness);
        x: root.width/2 - circle-radius + Math.cos(-rotation) * (radius - slot-width/2);
        y: root.height/2 - circle-radius+ Math.sin(-rotation) * (radius - slot-width/2);
    }

    public function set-brightness(brightness: float) {
        if (brightness > 1) {
            self.brightness = 1;
        } else if (brightness < 0) {
            self.brightness = 0;
        } else {
            self.brightness = brightness;
        }
    }

    public function get-brightness()-> float {
        return self.brightness;
    }

    // 单击微调
    public function on-one-button-click() {
        if (is-add-mode) {
            brightness += 0.1;
            if (brightness > 1) {
                brightness = 1;
                is-add-mode = false;
            }
        } else {
            brightness -= 0.1;
            if (brightness < 0) {
                brightness = 0;
                is-add-mode = true;
            }
        }
        brightness-changed(brightness);
    }

    // 双击清零
    public function on-one-button-double-click() {
        brightness = 0;
        is-add-mode = true;
        brightness-changed(brightness);
    }

    // 三击退出
    public function on-one-button-triple-click() {
        exit();
    }

    // 长按调节
    public function on-one-button-long-pressed-holding(dur: duration) {
        if (is-add-mode) {
            brightness += (dur - last-duration)/5000ms;
            if (brightness > 1) {
                brightness = 1;
                is-add-mode = false;
            }
        } else {
            brightness -= (dur - last-duration)/5000ms;
            if (brightness < 0) {
                brightness = 0;
                is-add-mode = true;
            }
        }
        last-duration = dur;
        brightness-changed(brightness);
    }

    // 长按结束调节
    public function on-one-button-long-pressed-held(dur: duration) {
        last-duration = 0;
    }
}

export component LEDPageTest inherits Rectangle {
    width: 240px;
    
    VerticalLayout {
        p := LEDPage {

        }
        HorizontalLayout {
            i := TextInput {}
            Button {
                text: "设置亮度";   
                clicked => {
                    p.set-brightness(i.text.to-float());
                }
            }
        }
        Button {
            text: "模拟长按";
            clicked => {
                p.on-one-button-long-pressed-holding(1000ms);
            }
        }
    }
}